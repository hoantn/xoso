-- ‚úÖ S·ª¨A L·ªñI: Ambiguous variable names
-- S·ª≠ d·ª•ng label blocks ƒë·ªÉ tr√°nh conflict gi·ªØa variable v√† column names

DO $$
DECLARE
    bet_record RECORD;
    user_current_balance NUMERIC;
    user_new_balance NUMERIC;
    existing_transaction_count INTEGER;
    processed_count INTEGER := 0;
    total_winnings NUMERIC := 0;
    constraint_exists BOOLEAN;
BEGIN
    RAISE NOTICE 'üéØ B∆Ø·ªöC 1: Ki·ªÉm tra v√† s·ª≠a constraint transactions_type_check';
    
    -- Ki·ªÉm tra constraint hi·ªán t·∫°i
    SELECT EXISTS(
        SELECT 1 FROM pg_constraint 
        WHERE conname = 'transactions_type_check'
        AND conrelid = 'transactions'::regclass
    ) INTO constraint_exists;
    
    RAISE NOTICE 'Constraint t·ªìn t·∫°i: %', constraint_exists;
    
    -- Th√™m 'game_win' v√†o constraint n·∫øu ch∆∞a c√≥
    BEGIN
        ALTER TABLE transactions DROP CONSTRAINT IF EXISTS transactions_type_check;
        ALTER TABLE transactions ADD CONSTRAINT transactions_type_check 
        CHECK (type IN ('deposit', 'withdrawal', 'purchase', 'adjustment', 'game_win', 'refund'));
        RAISE NOTICE '‚úÖ ƒê√£ c·∫≠p nh·∫≠t constraint cho ph√©p game_win';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ö†Ô∏è L·ªói c·∫≠p nh·∫≠t constraint: %', SQLERRM;
    END;

    RAISE NOTICE 'üéØ B∆Ø·ªöC 2: T√¨m v√† x·ª≠ l√Ω c∆∞·ª£c pending cho phi√™n #2336';
    
    -- T√¨m t·∫•t c·∫£ c∆∞·ª£c pending cho session 2336
    FOR bet_record IN 
        SELECT 
            ub.id,
            ub.user_id,
            ub.session_id,
            ub.bet_type,
            ub.numbers,
            ub.amount,
            ub.status,
            gs.session_number,
            gs.winning_numbers,
            gs.results_data
        FROM user_bets ub
        JOIN game_sessions gs ON ub.session_id = gs.id
        WHERE gs.session_number = 2336
        AND ub.status = 'pending'
    LOOP
        RAISE NOTICE 'üìã X·ª≠ l√Ω c∆∞·ª£c: ID=%, Type=%, Numbers=%, Amount=%', 
            bet_record.id, bet_record.bet_type, bet_record.numbers, bet_record.amount;
        
        -- ‚úÖ S·ª¨A: S·ª≠ d·ª•ng labeled block ƒë·ªÉ tr√°nh variable conflicts
        <<bet_processing>>
        DECLARE
            is_winner BOOLEAN := FALSE;
            calculated_win_amount NUMERIC := 0;  -- ‚úÖ ƒê·ªïi t√™n variable ƒë·ªÉ tr√°nh conflict
            special_prize TEXT;
            last_two_digits TEXT;
        BEGIN
            -- L·∫•y gi·∫£i ƒë·∫∑c bi·ªát t·ª´ results_data
            special_prize := bet_record.results_data->>'special_prize';
            last_two_digits := RIGHT(special_prize, 2);
            
            RAISE NOTICE 'üé≤ Gi·∫£i ƒë·∫∑c bi·ªát: %, 2 s·ªë cu·ªëi: %, Winning numbers: %', 
                special_prize, last_two_digits, bet_record.winning_numbers;
            
            -- Logic ki·ªÉm tra th·∫Øng thua cho l√¥ 2 s·ªë
            IF bet_record.bet_type LIKE '%lo_2_so%' THEN
                -- Ki·ªÉm tra xem c√≥ s·ªë n√†o trong bet tr√πng v·ªõi winning_numbers
                SELECT EXISTS(
                    SELECT 1 FROM unnest(bet_record.numbers) AS bet_num
                    WHERE bet_num = ANY(bet_record.winning_numbers)
                ) INTO is_winner;
                
                IF is_winner THEN
                    calculated_win_amount := bet_record.amount * 99; -- T·ª∑ l·ªá l√¥ 2 s·ªë 1:99
                END IF;
            END IF;
            
            -- Logic cho ƒë·ªÅ ƒë·∫∑c bi·ªát  
            IF bet_record.bet_type LIKE '%de_dac_biet%' THEN
                SELECT EXISTS(
                    SELECT 1 FROM unnest(bet_record.numbers) AS bet_num
                    WHERE bet_num = last_two_digits
                ) INTO is_winner;
                
                IF is_winner THEN
                    calculated_win_amount := bet_record.amount * 99; -- T·ª∑ l·ªá ƒë·ªÅ 1:99
                END IF;
            END IF;
            
            RAISE NOTICE 'üèÜ K·∫øt qu·∫£: Winner=%, Win Amount=%', is_winner, calculated_win_amount;
            
            -- ‚úÖ S·ª¨A: C·∫≠p nh·∫≠t tr·∫°ng th√°i c∆∞·ª£c v·ªõi variable name r√µ r√†ng
            UPDATE user_bets 
            SET 
                status = CASE WHEN is_winner THEN 'won' ELSE 'lost' END,
                win_amount = calculated_win_amount,  -- ‚úÖ S·ª≠ d·ª•ng variable name kh√°c
                updated_at = NOW(),
                processed_at = NOW()
            WHERE id = bet_record.id;
            
            processed_count := processed_count + 1;
            
            -- N·∫øu th·∫Øng, c·∫≠p nh·∫≠t balance v√† t·∫°o transaction
            IF is_winner AND calculated_win_amount > 0 THEN
                -- L·∫•y balance hi·ªán t·∫°i
                SELECT balance INTO user_current_balance 
                FROM users 
                WHERE id = bet_record.user_id;
                
                user_new_balance := user_current_balance + calculated_win_amount;
                total_winnings := total_winnings + calculated_win_amount;
                
                -- Ki·ªÉm tra transaction tr√πng l·∫∑p
                SELECT COUNT(*) INTO existing_transaction_count
                FROM transactions 
                WHERE reference_id = bet_record.id
                AND type = 'game_win';
                
                IF existing_transaction_count = 0 THEN
                    -- C·∫≠p nh·∫≠t balance user
                    UPDATE users 
                    SET balance = user_new_balance 
                    WHERE id = bet_record.user_id;
                    
                    -- T·∫°o transaction th·∫Øng
                    INSERT INTO transactions (
                        user_id,
                        type,
                        amount,
                        balance_before,
                        balance_after,
                        description,
                        status,
                        reference_id,
                        metadata,
                        created_at
                    ) VALUES (
                        bet_record.user_id,
                        'game_win',
                        calculated_win_amount,
                        user_current_balance,
                        user_new_balance,
                        'Th·∫Øng c∆∞·ª£c ' || bet_record.bet_type || ' - Phi√™n 2336',
                        'completed',
                        bet_record.id,
                        jsonb_build_object(
                            'bet_id', bet_record.id,
                            'session_number', 2336,
                            'bet_type', bet_record.bet_type,
                            'bet_numbers', bet_record.numbers,
                            'win_amount', calculated_win_amount,
                            'processed_manually', true
                        ),
                        NOW()
                    );
                    
                    RAISE NOTICE 'üí∞ ƒê√£ c·∫≠p nh·∫≠t balance user % t·ª´ % th√†nh % (+%)', 
                        bet_record.user_id, user_current_balance, user_new_balance, calculated_win_amount;
                ELSE
                    RAISE NOTICE '‚ö†Ô∏è Transaction ƒë√£ t·ªìn t·∫°i cho bet %', bet_record.id;
                END IF;
            END IF;
        END bet_processing;
        
    END LOOP;
    
    RAISE NOTICE 'üéØ B∆Ø·ªöC 3: T·ªïng k·∫øt k·∫øt qu·∫£';
    RAISE NOTICE '‚úÖ ƒê√£ x·ª≠ l√Ω % c∆∞·ª£c', processed_count;
    RAISE NOTICE 'üí∞ T·ªïng ti·ªÅn th∆∞·ªüng: %', total_winnings;
    
END $$;

-- Hi·ªÉn th·ªã b√°o c√°o cu·ªëi c√πng
DO $$
DECLARE
    final_report RECORD;
BEGIN
    -- L·∫•y b√°o c√°o cu·ªëi c√πng
    SELECT 
        COUNT(*) as total_bets,
        COUNT(*) FILTER (WHERE ub.status = 'won') as won_bets,
        COUNT(*) FILTER (WHERE ub.status = 'lost') as lost_bets,
        COUNT(*) FILTER (WHERE ub.status = 'pending') as still_pending,
        COALESCE(SUM(ub.win_amount) FILTER (WHERE ub.status = 'won'), 0) as total_winnings
    INTO final_report
    FROM user_bets ub
    JOIN game_sessions gs ON ub.session_id = gs.id
    WHERE gs.session_number = 2336;
    
    RAISE NOTICE 'üèÜ K·∫æT QU·∫¢ CU·ªêI C√ôNG PHI√äN 2336:';
    RAISE NOTICE '   üìä T·ªïng c∆∞·ª£c: %', final_report.total_bets;
    RAISE NOTICE '   ‚úÖ Th·∫Øng: %', final_report.won_bets;
    RAISE NOTICE '   ‚ùå Thua: %', final_report.lost_bets;
    RAISE NOTICE '   ‚è≥ C√≤n pending: %', final_report.still_pending;
    RAISE NOTICE '   üí∞ T·ªïng th∆∞·ªüng: %', final_report.total_winnings;
END $$;

-- Hi·ªÉn th·ªã user balance sau khi x·ª≠ l√Ω
SELECT 
    'üí∞ USER BALANCE SAU X·ª¨ L√ù' as report_title,
    u.id,
    u.username,
    u.balance,
    COUNT(ub.id) as total_bets_placed,
    COUNT(ub.id) FILTER (WHERE ub.status = 'won') as won_bets,
    COALESCE(SUM(ub.win_amount) FILTER (WHERE ub.status = 'won'), 0) as total_winnings_received
FROM users u
JOIN user_bets ub ON u.id = ub.user_id
JOIN game_sessions gs ON ub.session_id = gs.id
WHERE gs.session_number = 2336
GROUP BY u.id, u.username, u.balance
ORDER BY total_winnings_received DESC;
